// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	commons "github.com/abhi16180/asyncgo/commons"
	internal "github.com/abhi16180/asyncgo/internal"

	mock "github.com/stretchr/testify/mock"

	sync "sync"
)

// Queue is an autogenerated mock type for the Queue type
type Queue struct {
	mock.Mock
}

// Pop provides a mock function with given fields:
func (_m *Queue) Pop() *internal.Task {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Pop")
	}

	var r0 *internal.Task
	if rf, ok := ret.Get(0).(func() *internal.Task); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internal.Task)
		}
	}

	return r0
}

// Process provides a mock function with given fields: wg, options
func (_m *Queue) Process(wg *sync.WaitGroup, options *commons.Options) {
	_m.Called(wg, options)
}

// Push provides a mock function with given fields: task
func (_m *Queue) Push(task *internal.Task) error {
	ret := _m.Called(task)

	if len(ret) == 0 {
		panic("no return value specified for Push")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*internal.Task) error); ok {
		r0 = rf(task)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewQueue creates a new instance of Queue. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQueue(t interface {
	mock.TestingT
	Cleanup(func())
}) *Queue {
	mock := &Queue{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
